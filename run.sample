#!/bin/bash

# default run package manager
prun="$(which npm) run"

# default run composer manager
crun="$(which composer)"

# npm legacy version
npm_legacy_version="6.14.4"

func_npm() {
  # check if npm command exist
  if hash npm 2>/dev/null; then

    # npm current version
    npm_version="$(npm -v)"

    echo "[*] Detected NPM version: $npm_version"
  else
    echo "[*] NPM not found. exit"
    exit
  fi
}

func_yarn() {
  # check if yarn command exist
  if hash yarn 2>/dev/null; then

    # yarn current version
    yarn_version="$(yarn -v)"

    echo "[*] Detected Yarn version: $yarn_version"
  else
    echo "[*] Yarn not found. Please install first"
    exit
  fi
}

func_php() {
  # print php version
  if hash php 2>/dev/null; then

    # php current version
    php_version=$(php -v | grep ^PHP | cut -d' ' -f2)

    echo "[*] Detected php version: $php_version"
  else
    echo "[*] PHP not found. Please install first"
    exit
  fi
}

func_composer() {
  if hash composer 2>/dev/null; then

    # composer current version
    composer_version=$(composer -V | grep ^Composer | cut -d' ' -f3)

    echo "[*] Detected composer version: $composer_version"
  else
    echo "[*] Composer not found. Please install first"
    exit
  fi
}

func_build_log() {
  if [ ! -f "./build.log" ]; then
    touch "./build.log"
  fi

  now="$(date +'%Y-%m-%d %H:%M')"
  count=$(awk 'END { print NR }' ./build.log)

  echo "[build] Build #$(($count+1)) at $now" >> "./build.log"
  echo "[*] OK"
}

if [ -f "./package.json" ]; then
  echo "[*] Package.json detected"

  if [ -f "./package-lock.json" ]; then

    # check npm
    func_npm

    # Remove package-lock.json
    echo "[*] Remove package-lock.json"
    rm -rf "./package-lock.json"

    # Install depedencies of package.json
    echo "[*] Install depedencies of package.json using npm"
    if awk "BEGIN {exit !($npm_version > $npm_legacy_version)}"; then
      echo "[*] Installing depedencies using npm legacy mode"
      npm install --legacy-peer-deps &>/dev/null
    else
      npm install &>/dev/null
    fi

  elif [ -f "./yarn.lock" ]; then

    # check yarn
    func_yarn

    # Remove yarn.lock
    echo "[*] Remove yarn.lock"
    rm -rf "./yarn.lock"

    # Install depedencies of package.json
    echo "[*] Install depedencies of package.json using yarn"
    yarn &>/dev/null

    # Set alias command for run yarn
    echo "[*] Set alias command for run yarn"
    prun="$(which yarn)"
  else
    echo "[*] No package-lock.json or yarn.lock found"

    # check npm
    func_npm

    # Install depedencies of package.json
    echo "[*] Install depedencies of package.json using npm"
    if awk "BEGIN {exit !($npm_version > $npm_legacy_version)}"; then
      echo "[*] Installing depedencies using npm legacy mode"
      npm install --legacy-peer-deps &>/dev/null
    else
      npm install &>/dev/null
    fi

  fi
fi

# check if project is NextJS
if [ -f "./next.config.js" ]; then
  echo "[*] It seems nextjs framework"

  # Find dist folder and remove
  if [ -f "./dist/index.js" ]; then
    echo "[*] Remove folder './dist'"
    rm -rf "./dist"
  fi

  # Build nextjs framework
  echo "[*] Build nextjs framework"
  $prun build &>/dev/null

  # Find next-sitemap
  if [ -f "./next-sitemap.js" ]; then
    echo "[*] Build next-sitemap plugin"
    $prun sitemap &>/dev/null
  fi

  # write log
  func_build_log
fi

# check if project is ReactJS
if [ -f "./node_modules/.bin/react-scripts" ]; then
  echo "[*] It seems reactjs framework"
  
  # find build folder and remove
  if [ -d "./build" ]; then
    rm -rf "./build"
  fi

  # Build reactjs framework
  echo "[*] Build reactjs framework"
  $prun build &>/dev/null

  # write log
  func_build_log
fi

# check if project is Adonis
if [ -f "./ace" ]; then

  if [ -f "./env.ts" ]; then
    echo "[*] It seems adonis 5 framework"

    # find build folder and remove
    if [ -d "./build" ]; then
      rm -rf "./build"
    fi

    # Build adonis 5 framework
    echo "[*] Build adonis 5 framework"
    $prun build &>/dev/null

    echo "[*] Copy env file into build folder"
    cp .env build/

    echo "[*] Clean install on build folder"

    if [ -f "./package-lock.json" ]; then

      if awk "BEGIN {exit !($npm_version > $npm_legacy_version)}"; then
        ci="npm ci --production --legacy-peer-deps"
      else
        ci="npm ci --production"
      fi

    elif [ -f "./yarn.lock" ]; then
      ci="yarn install --production"
    fi

    cd build/

    $ci &>/dev/null

  else
    echo "[*] It seems adonis framework"
  fi

  # write log
  func_build_log

fi


# check if project is using PHP Language
if [ -f "./composer.json" ]; then

  # check php
  func_php

  # check composer
  func_composer

  # Find composer.lock file and remove
  if [ -f "./composer.lock" ]; then
    echo "[*] Remove composer.lock file"
    rm -rf "./composer.lock"
  fi

  # Find vendor folder and remove
  if [ -d "./vendor" ]; then
    echo "[*] Remove vendor folder"
    rm -rf "./vendor"
  fi

  # Install depedencies of composer.json
  echo "[*] Install depedencies of composer.json using composer"
  $crun install &>/dev/null

  # check if project is Laravel
  if [ -f "./artisan" ]; then
    echo "[*] It seems laravel framework"

    artisan="$(php artisan)"

    # build javascript webpack
    echo "[*] Bundling javascript files with webpack"
    $prun prod &>/dev/null

    # remove the cached bootstrap files
    echo "[*] Remove the cached bootstrap files"
    $artisan optimize:clear &>/dev/null

    # write log
    func_build_log
  fi
fi
